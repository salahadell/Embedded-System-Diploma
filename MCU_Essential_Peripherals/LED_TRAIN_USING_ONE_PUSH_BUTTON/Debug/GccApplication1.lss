
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000742  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000598  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fc  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PORTD_init>:


void PORTD_init()
{
	//enable output point to pin 4/5/6/7
	DDRD_|=0b1111<<4;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6f       	ori	r24, 0xF0	; 240
  70:	81 bb       	out	0x11, r24	; 17
  72:	08 95       	ret

00000074 <main>:
#define clear_bit(PORT,bit) PORT&= ~(1<<bit)


int main(void)
{
	PORTD_init();
  74:	0e 94 36 00 	call	0x6c	; 0x6c <PORTD_init>
	int flag=0;
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
	while(1)
	{
		if((PIND_&1)==1 )
  7c:	80 9b       	sbis	0x10, 0	; 16
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x8>
		{
			if(!flag)
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	79 f5       	brne	.+94     	; 0xe2 <main+0x6e>
			{
				
				if(((PORTD_&(1<<5))>>5)==0)
  84:	95 99       	sbic	0x12, 5	; 18
  86:	0d c0       	rjmp	.+26     	; 0xa2 <main+0x2e>
			{
				set_bit(PORTD_,5);
  88:	22 b3       	in	r18, 0x12	; 18
  8a:	20 62       	ori	r18, 0x20	; 32
  8c:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f e7       	ldi	r18, 0x7F	; 127
  90:	34 e8       	ldi	r19, 0x84	; 132
  92:	4e e1       	ldi	r20, 0x1E	; 30
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x20>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x2a>
  9e:	00 00       	nop
  a0:	ed cf       	rjmp	.-38     	; 0x7c <main+0x8>
				_delay_ms(10000);
				
			}
			else if(((PORTD_&(1<<6))>>6)==0)
  a2:	96 99       	sbic	0x12, 6	; 18
  a4:	0d c0       	rjmp	.+26     	; 0xc0 <main+0x4c>
			{
				set_bit(PORTD_,6);
  a6:	22 b3       	in	r18, 0x12	; 18
  a8:	20 64       	ori	r18, 0x40	; 64
  aa:	22 bb       	out	0x12, r18	; 18
  ac:	2f e7       	ldi	r18, 0x7F	; 127
  ae:	34 e8       	ldi	r19, 0x84	; 132
  b0:	4e e1       	ldi	r20, 0x1E	; 30
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x3e>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x48>
  bc:	00 00       	nop
  be:	de cf       	rjmp	.-68     	; 0x7c <main+0x8>
				_delay_ms(10000);

			}
			else if(((PORTD_&(1<<7))>>7)==0)
  c0:	97 99       	sbic	0x12, 7	; 18
  c2:	dc cf       	rjmp	.-72     	; 0x7c <main+0x8>
			{
				set_bit(PORTD_,7);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	8f e7       	ldi	r24, 0x7F	; 127
  cc:	94 e8       	ldi	r25, 0x84	; 132
  ce:	2e e1       	ldi	r18, 0x1E	; 30
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	20 40       	sbci	r18, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x5c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x66>
  da:	00 00       	nop
				_delay_ms(10000);
				flag=1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	cd cf       	rjmp	.-102    	; 0x7c <main+0x8>

			}
			}
			else
			{
			 if(((PORTD_&(1<<7))>>7)==1)
  e2:	97 9b       	sbis	0x12, 7	; 18
  e4:	0d c0       	rjmp	.+26     	; 0x100 <main+0x8c>
			{
				clear_bit(PORTD_,7);
  e6:	22 b3       	in	r18, 0x12	; 18
  e8:	2f 77       	andi	r18, 0x7F	; 127
  ea:	22 bb       	out	0x12, r18	; 18
  ec:	3f e7       	ldi	r19, 0x7F	; 127
  ee:	44 e8       	ldi	r20, 0x84	; 132
  f0:	2e e1       	ldi	r18, 0x1E	; 30
  f2:	31 50       	subi	r19, 0x01	; 1
  f4:	40 40       	sbci	r20, 0x00	; 0
  f6:	20 40       	sbci	r18, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x7e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x88>
  fc:	00 00       	nop
  fe:	be cf       	rjmp	.-132    	; 0x7c <main+0x8>
				_delay_ms(10000);

			}
			 else if(((PORTD_&(1<<6))>>6)==1)
 100:	96 9b       	sbis	0x12, 6	; 18
 102:	0d c0       	rjmp	.+26     	; 0x11e <main+0xaa>
			{
				clear_bit(PORTD_,6);
 104:	22 b3       	in	r18, 0x12	; 18
 106:	2f 7b       	andi	r18, 0xBF	; 191
 108:	22 bb       	out	0x12, r18	; 18
 10a:	3f e7       	ldi	r19, 0x7F	; 127
 10c:	44 e8       	ldi	r20, 0x84	; 132
 10e:	2e e1       	ldi	r18, 0x1E	; 30
 110:	31 50       	subi	r19, 0x01	; 1
 112:	40 40       	sbci	r20, 0x00	; 0
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x9c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0xa6>
 11a:	00 00       	nop
 11c:	af cf       	rjmp	.-162    	; 0x7c <main+0x8>
				_delay_ms(10000);
			}

		    else if(((PORTD_&(1<<5))>>5)==1)
 11e:	95 9b       	sbis	0x12, 5	; 18
 120:	ad cf       	rjmp	.-166    	; 0x7c <main+0x8>
		   {
			clear_bit(PORTD_,5);
 122:	82 b3       	in	r24, 0x12	; 18
 124:	8f 7d       	andi	r24, 0xDF	; 223
 126:	82 bb       	out	0x12, r24	; 18
 128:	3f e7       	ldi	r19, 0x7F	; 127
 12a:	44 e8       	ldi	r20, 0x84	; 132
 12c:	8e e1       	ldi	r24, 0x1E	; 30
 12e:	31 50       	subi	r19, 0x01	; 1
 130:	40 40       	sbci	r20, 0x00	; 0
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0xba>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xc4>
 138:	00 00       	nop
			_delay_ms(10000);
			flag=0;
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	9e cf       	rjmp	.-196    	; 0x7c <main+0x8>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
