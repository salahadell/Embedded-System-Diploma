
MCU_Essential_Peripherals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  4 .ARM          00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000310  08000310  00010310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000318  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000318  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a10  00000000  00000000  00010341  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001b2  00000000  00000000  00010d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000007c  00000000  00000000  00010f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000050  00000000  00000000  00010f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000038  00000000  00000000  00010fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d20  00000000  00000000  00011008  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000063a  00000000  00000000  00012d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000809d  00000000  00000000  00013362  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b3ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000007c  00000000  00000000  0001b47c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002f8 	.word	0x080002f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002f8 	.word	0x080002f8

08000170 <GPIO_init>:
#define GPIOB_ODR *(volatile uint32_t *)(GPIOB_BASE + 0x0C)
#define GPIOA_IDR *(volatile uint32_t *)(GPIOA_BASE + 0x08)


void GPIO_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//enable clock for PORTA
	RCC_APB2En|=1<<2;
 8000174:	4b19      	ldr	r3, [pc, #100]	; (80001dc <GPIO_init+0x6c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a18      	ldr	r2, [pc, #96]	; (80001dc <GPIO_init+0x6c>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	//enable clock for PORTB
	RCC_APB2En|=1<<3;
 8000180:	4b16      	ldr	r3, [pc, #88]	; (80001dc <GPIO_init+0x6c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a15      	ldr	r2, [pc, #84]	; (80001dc <GPIO_init+0x6c>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
	//enable floating input to PA_pin1 (4-->7)
	GPIOA_CRL|=0b0100<<4;
 800018c:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <GPIO_init+0x70>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a13      	ldr	r2, [pc, #76]	; (80001e0 <GPIO_init+0x70>)
 8000192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000196:	6013      	str	r3, [r2, #0]
	//enable floating input to PA_pin13 (20-->23)
	GPIOA_CRH|=0b0100<<20;
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <GPIO_init+0x74>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a11      	ldr	r2, [pc, #68]	; (80001e4 <GPIO_init+0x74>)
 800019e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001a2:	6013      	str	r3, [r2, #0]
	//enable push-pull output to PB_pin1
	GPIOB_CRL|=  0b01<<4;
 80001a4:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <GPIO_init+0x78>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a0f      	ldr	r2, [pc, #60]	; (80001e8 <GPIO_init+0x78>)
 80001aa:	f043 0310 	orr.w	r3, r3, #16
 80001ae:	6013      	str	r3, [r2, #0]
	GPIOB_CRL&= ~(0b11<<6);
 80001b0:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <GPIO_init+0x78>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0c      	ldr	r2, [pc, #48]	; (80001e8 <GPIO_init+0x78>)
 80001b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001ba:	6013      	str	r3, [r2, #0]
	//enable push-pull output to PB_pin13
	GPIOB_CRH |=  0b01<<20;
 80001bc:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <GPIO_init+0x7c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a0a      	ldr	r2, [pc, #40]	; (80001ec <GPIO_init+0x7c>)
 80001c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001c6:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(0b11<<22);
 80001c8:	4b08      	ldr	r3, [pc, #32]	; (80001ec <GPIO_init+0x7c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a07      	ldr	r2, [pc, #28]	; (80001ec <GPIO_init+0x7c>)
 80001ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80001d2:	6013      	str	r3, [r2, #0]

}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40021018 	.word	0x40021018
 80001e0:	40010800 	.word	0x40010800
 80001e4:	40010804 	.word	0x40010804
 80001e8:	40010c00 	.word	0x40010c00
 80001ec:	40010c04 	.word	0x40010c04

080001f0 <main>:


int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
	GPIO_init();
 80001f6:	f7ff ffbb 	bl	8000170 <GPIO_init>


while(1)
{
	if((GPIOA_IDR&(1<<1))>>1 == 0)             //  A1 single pressing
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <main+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b00      	cmp	r3, #0
 8000204:	d10c      	bne.n	8000220 <main+0x30>
	{
		GPIOB_ODR^=1<<1;
 8000206:	4b14      	ldr	r3, [pc, #80]	; (8000258 <main+0x68>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a13      	ldr	r2, [pc, #76]	; (8000258 <main+0x68>)
 800020c:	f083 0302 	eor.w	r3, r3, #2
 8000210:	6013      	str	r3, [r2, #0]
		while((GPIOA_IDR&(1<<1))>>1 == 0);
 8000212:	bf00      	nop
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <main+0x64>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f003 0302 	and.w	r3, r3, #2
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0f9      	beq.n	8000214 <main+0x24>

	}

	if((GPIOA_IDR&(1<<13))>>13 == 1)             //  A13 multi pressing
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <main+0x64>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	0b5b      	lsrs	r3, r3, #13
 8000226:	f003 0301 	and.w	r3, r3, #1
 800022a:	2b01      	cmp	r3, #1
 800022c:	d105      	bne.n	800023a <main+0x4a>
		{
			GPIOB_ODR^=1<<13;
 800022e:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <main+0x68>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a09      	ldr	r2, [pc, #36]	; (8000258 <main+0x68>)
 8000234:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000238:	6013      	str	r3, [r2, #0]
		}
	for(int i=0;i<1500;i++);
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e002      	b.n	8000246 <main+0x56>
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3301      	adds	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f240 52db 	movw	r2, #1499	; 0x5db
 800024c:	4293      	cmp	r3, r2
 800024e:	ddf7      	ble.n	8000240 <main+0x50>
	if((GPIOA_IDR&(1<<1))>>1 == 0)             //  A1 single pressing
 8000250:	e7d3      	b.n	80001fa <main+0xa>
 8000252:	bf00      	nop
 8000254:	40010808 	.word	0x40010808
 8000258:	40010c0c 	.word	0x40010c0c

0800025c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000260:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <LoopForever+0x6>)
  ldr r1, =_edata
 8000266:	490d      	ldr	r1, [pc, #52]	; (800029c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <LoopForever+0xe>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800026c:	e002      	b.n	8000274 <LoopCopyDataInit>

0800026e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000272:	3304      	adds	r3, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000278:	d3f9      	bcc.n	800026e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027a:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800027c:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <LoopForever+0x16>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000280:	e001      	b.n	8000286 <LoopFillZerobss>

08000282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000284:	3204      	adds	r2, #4

08000286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000288:	d3fb      	bcc.n	8000282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028a:	f000 f811 	bl	80002b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ffaf 	bl	80001f0 <main>

08000292 <LoopForever>:

LoopForever:
    b LoopForever
 8000292:	e7fe      	b.n	8000292 <LoopForever>
  ldr   r0, =_estack
 8000294:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800029c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a0:	08000318 	.word	0x08000318
  ldr r2, =_sbss
 80002a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a8:	2000001c 	.word	0x2000001c

080002ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC1_2_IRQHandler>
	...

080002b0 <__libc_init_array>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	2500      	movs	r5, #0
 80002b4:	4e0c      	ldr	r6, [pc, #48]	; (80002e8 <__libc_init_array+0x38>)
 80002b6:	4c0d      	ldr	r4, [pc, #52]	; (80002ec <__libc_init_array+0x3c>)
 80002b8:	1ba4      	subs	r4, r4, r6
 80002ba:	10a4      	asrs	r4, r4, #2
 80002bc:	42a5      	cmp	r5, r4
 80002be:	d109      	bne.n	80002d4 <__libc_init_array+0x24>
 80002c0:	f000 f81a 	bl	80002f8 <_init>
 80002c4:	2500      	movs	r5, #0
 80002c6:	4e0a      	ldr	r6, [pc, #40]	; (80002f0 <__libc_init_array+0x40>)
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <__libc_init_array+0x44>)
 80002ca:	1ba4      	subs	r4, r4, r6
 80002cc:	10a4      	asrs	r4, r4, #2
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d105      	bne.n	80002de <__libc_init_array+0x2e>
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002d8:	4798      	blx	r3
 80002da:	3501      	adds	r5, #1
 80002dc:	e7ee      	b.n	80002bc <__libc_init_array+0xc>
 80002de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e2:	4798      	blx	r3
 80002e4:	3501      	adds	r5, #1
 80002e6:	e7f2      	b.n	80002ce <__libc_init_array+0x1e>
 80002e8:	08000310 	.word	0x08000310
 80002ec:	08000310 	.word	0x08000310
 80002f0:	08000310 	.word	0x08000310
 80002f4:	08000314 	.word	0x08000314

080002f8 <_init>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr

08000304 <_fini>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr
