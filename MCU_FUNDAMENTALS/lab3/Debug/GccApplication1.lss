
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cd  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  00000921  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002df  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_2>
   c:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PORTD_init>:
#define DDRD_ *(vuint08_t *)(IO_BASE + 0x11)

void PORTD_init()
{
	//enable output point to pin5/6/7
	PORTD_|=0b111<<5;
  6c:	82 b3       	in	r24, 0x12	; 18
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	82 bb       	out	0x12, r24	; 18
  72:	08 95       	ret

00000074 <main>:
}


int main(void)
{
	PORTD_init();
  74:	0e 94 36 00 	call	0x6c	; 0x6c <PORTD_init>
	//enable global interrupt
	SREG_|= 1<<7;
  78:	8f b7       	in	r24, 0x3f	; 63
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	8f bf       	out	0x3f, r24	; 63
	//enable INT0/INT1/INT2
	GICR_|= 0b111<<5;
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 6e       	ori	r24, 0xE0	; 224
  82:	8b bf       	out	0x3b, r24	; 59
	//enable falling edge for INT2
	MCUSR_&= ~(1<<6);
  84:	84 b7       	in	r24, 0x34	; 52
  86:	8f 7b       	andi	r24, 0xBF	; 191
  88:	84 bf       	out	0x34, r24	; 52
	//enable any logical change for INT0 and rising edge for INT1
	MCUCR_|= 0b1101<<0;
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	8d 60       	ori	r24, 0x0D	; 13
  8e:	85 bf       	out	0x35, r24	; 53

	while(1)
	{
		PORTD_|= 0b000<<5 ;
  90:	82 b3       	in	r24, 0x12	; 18
  92:	82 bb       	out	0x12, r24	; 18
  94:	fd cf       	rjmp	.-6      	; 0x90 <main+0x1c>

00000096 <__vector_1>:
	}
	return 0;
}
ISR(INT0_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	PORTD_ |= 1<<5 ;
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f e3       	ldi	r18, 0x3F	; 63
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <__vector_1+0x1c>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <__vector_1+0x26>
  bc:	00 00       	nop
	_delay_ms(1000);
	//disable pending pin
	GIFR_|= 1<<5;
  be:	8a b7       	in	r24, 0x3a	; 58
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8a bf       	out	0x3a, r24	; 58
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_2>:
ISR(INT1_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	PORTD_ |= 1<<6 ;
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	2f e3       	ldi	r18, 0x3F	; 63
  ec:	8d e0       	ldi	r24, 0x0D	; 13
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <__vector_2+0x1c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <__vector_2+0x26>
  fa:	00 00       	nop
	_delay_ms(1000);
	//disable pending pin
	GIFR_|= 1<<6;
  fc:	8a b7       	in	r24, 0x3a	; 58
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	8a bf       	out	0x3a, r24	; 58
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_3>:
ISR(INT2_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	PORTD_ |= 1<<7 ;
 122:	82 b3       	in	r24, 0x12	; 18
 124:	80 68       	ori	r24, 0x80	; 128
 126:	82 bb       	out	0x12, r24	; 18
 128:	2f e3       	ldi	r18, 0x3F	; 63
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <__vector_3+0x1c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <__vector_3+0x26>
 138:	00 00       	nop
	_delay_ms(1000);
	//disable pending pin
	GIFR_|= 1<<7;
 13a:	8a b7       	in	r24, 0x3a	; 58
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8a bf       	out	0x3a, r24	; 58
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
